
	原型模式

1、原型模式
	每一个函数都有一个prototype原型对象；
	每一个对象都有一个constructor属性，指向当前对象的构造函数。
	每一个构造函数的实例对象，在创建时会先给对象一个[[_proto_]]
	
	constructor：改变实例指向构造函数，原型对象指向构造函数。
					1》能够通过实例对象找到构造函数
						obj.constructor==Object;
							
					2》通过原型对象找到构造函数。会改变实例类型)
						Object.prototype.constructor==Object;
						
	prototype:存放所有实例所共享的属性和方法。
	
	栗子：
		function Student(id,name,age){
            this.id=id;
            this.name=name;
            this.age=age;
        }
        // Student.prototype.sayName=function(){
        //     alert(this.name);
        // }
        // Student.prototype.sayAge=function(){
        //     alert(this.age);
        // }


        // 与上述功能一样 ，一样可以调用。
        Student.prototype={//新创建了new Obeject（），此时prototype指向的是Object。
            constructor:Student,//改变实例所指向的构造函数，指向Student，原型对象指向构造函数；没有声明，默认指向Object。
            sayName:function(){ alert(this.name);},
            sayAge:function(){ alert(this.age);},
        }
        // Student.prototype.constructor=Student;


        var stu1=new Student(1001,"lisa",20);
        var stu2=new Student(1002,"zhangsan",18);
        stu1.sayName();
        stu1.sayAge();
        console.log(stu1);
        console.log(stu2);

        console.log(stu1.constructor==Student);//true
        console.log(Student.prototype.constructor==Student);//true
        console.log(stu1.sayName==stu2.sayName);//true
	
	
	
2、继承
	1》子类的原型指向父类的实例
        Dog.prototype=new Animal();//继承
        Dog.prototype.constructor=Dog;
	
	
		 function Student(id,name,age){
            this.id=id;
            this.name=name;
            this.age=age;
            // this.number++;//没有改变number的值，num为继承原型的，不能改变
            Student.prototype.number++;
        }
        Student.prototype.number=0;
        var stu1=new Student(1001,"lisa",16);
        var stu2=new Student(1002,"zasan",17);
        var stu3=new Student(1003,"gesu",18);
        var stu4=new Student(1004,"chenyan",19);
        
        console.log(stu1.number);//4
        console.log(Student.prototype.number);//4
		
		
	栗子：
		 function Rich(name,age,gender){
            this.name=name;
            this.age=age;
            this.gender=gender;
        }
        Rich.prototype.makeMoney=function(){
            alert("make money");
        }
        Rich.prototype.money=["card1","card2","card3","card4"]

        
        // 构造穷人函数
        function Poor(name,age,gender,color){
           /* this.name=name;
            this.age=age;
            this.gender=gender;*/
            // 属性继承
            Rich.call(this,name,age,gender);
            
            this.color=color;
        }

        // 子类的原型指向父类的实例
        Poor.prototype=new Rich();
        Poor.prototype.constructor=Poor;

        // 创建穷人的实例对象
        var p1=new Poor("terry",40,"men","red");
        console.log(p1);
        p1.makeMoney();

		
	栗子3：
		// Animal
        function Animal(name,age){
            this.name=name;
            this.age=age;
        }
        Animal.prototype.sayName=function(){
            alert(this.name);
        }
        Animal.prototype.sayAge=function(){
            alert(this.age);
        }


        // dog
        function Dog(name,age,weight){
            Animal.call(this,name,age,weight);
            this.weight=weight;
        }
        // 子类的原型指向父类的实例
        Dog.prototype=new Animal();//继承
        Dog.prototype.constructor=Dog;

        Dog.prototype.lookColor=function(){
            alert("wanhwangwang~~~");
        }



        // bird
        function Bird(name,age,color){
            Animal.call(this,name,age);//属性继承 
            this.color=color;
        }
        // 子类的原型指向父类的实例
        Bird.prototype=new Animal();//继承
        Bird.prototype.constructor=Dog;
        Bird.prototype.fly=function(){
            alert("fly~~~");
        }


        var dog1=new Dog("一休",8,10);
        var bird1=new Bird("麻雀",2,"red");
        dog1.sayName();
        dog1.sayAge();
        console.log(dog1);
        console.log(bird1);