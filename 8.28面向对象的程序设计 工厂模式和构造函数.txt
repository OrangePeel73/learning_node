
	面向对象的程序设计 工厂模式和构造函数
	
	面向对象可以把程序中的关键模块都视为对象，
	而模块拥有属性及方法。
	
	封装与继承：
		
	
1、工厂模式
	在函数内创建一个对象，给对象赋予属性及方法再将对象返回即可。
	
	缺点：
		1》对象不能细分；无法识别对象的模型(不知道这个对象的类型)，因为全部是Object，不像Date、Array等，
		2》函数没有进行完美的封装；
		3》因此出现了构造函数模式。
	
	栗子：	
		function creatPerson(name,age,job){
            var o=new Object();//显示创建对象
            o.name=name;//添加属性
            o.age=age;
            o.job=job;
            o.sayName=function(){//添加方法
                alert(this.name);
            }
            return o;//返回对象

        }
        var p1=creatPerson("terry",20,"boss");
        var p2=creatPerson("tom",20,"boss");
        console.log(p1);
    
        console.log(p1.constructor==creatPerson());//false
        console.log(p2.constructor==creatPerson());//false

        console.log(p1 instanceof Object);//true
        console.log(p1 instanceof creatPerson);//false
        console.log(p2 instanceof Object);//true        
        console.log(p2 instanceof creatPerson);//false

        console.log(p1.sayName==p2.sayName);//false
	
	
2、构造函数
	ECMAScript中构造函数可以创建特定类型的对象，类似于Array、Date等原生js的对象。
	
	
	
	调用构造函数的步骤：
		1》创建一个新的对象；
		2》将构造函数的作用域赋值给这个对象（因此this指向这个对象）；
		3》执行构造函数的代码
			（即给新的对象添加属性和方法）
		4》返回对象
		
		
	缺点：
		1》每次创建实例使都要重新创建一次方法，
			创建两次完全相同的方法是没有必要的。
		2》在下述的栗子中，a和b都有一个sayName的方法，
			但是两个方法不是同一个function的实例，
			因此每定义一个函数就是实例化一个对象。
			即会导致不同的作用域链和标识符解析，
			但是创建function的新实例的机制仍然是相同的，
			不同实例的同名函数是不相等的。
			console.log(a.sayName==b.sayName);//false
		
		
	与工厂模式的区别：
		1》函数名首写字母为大写（惯例：构造函数的首写字母为大写）
		2》没有显示的创建对象new Object；
		3》直接将属性和方法赋值给this对象；
		4》没有return语句；
		5》使用new创建对象；独立开辟了一个新的内存空间；
		6》能够识别对象。
		
		7》调用方式不同。
		8》任何函数只要通过new来调用，那他就可以作为构造函数，
			而任何函数，不通过new来调用，它就是普通函数。
		
		
		
	模拟内置的构造函数：
		var arr=new Array();
		arr.push();
		Array.prototype.push=function(){}
		function  Student(id ,name,age){
			this.id=id;
			this.name=name;
			this.age=age;
		}
		var s1=new Student(1001,"lisa",20);//使用new，独立开辟了一个新的内存空间s1;
		
		
		
	栗子：
			function Person(name,age,job){
				this.name=name;
				this.age=age;
				this.job=job;
				this.sayName=function(){
					alert(this.name+" "+this.age+" "+this.job);
				}

			}
			var a=new Person('terry',20,'boss');
			var b=new Person("tom",20,"emplayeer");
			console.log(a.constructor==Person);//true
			console.log(b.constructor==Person);//true

			// 检测某对象是否是某构造函数的实例
			console.log(a instanceof Object);//true
			console.log(a instanceof Person);//true
			console.log(b instanceof Object);//true        
			console.log(b instanceof Person);//true

			/* 每定义一个哈函数就是实例化一个对象，
				即会导致不同的作用域链和标识符解析，
				但是两者创建function的新实例的机制仍然是一样的，
				不同实例的同名函数是不相等的 */
			console.log(a.sayName==b.sayName);//false

			/*
			  1》原型属性与实例对象的创建与否无关，他在对象创建之前就已存在。
			  2》只有构造函数才有prototype属性，而构造函数的实例 如a，b是没有该属性的，但可以用_proto_非标准用法查看。
			  3》用new创建对象时，还从原型上获得了一个constructor的属性，它指向创建对象的函数Person。
			  4》constructor属性存在于每一个function的prototype属性中。
				每个实例可以通过constructor属性访问他的构造函数。
			*/

			// constructor属性存在于每一个function的prototype属性中。
			console.log(a.constructor===Person.prototype.constructor);//true
			console.log(Person.prototype.constructor===Person);//true
			
			// 用new创建对象时，还从原型上获得了一个constructor的属性，它指向创建对象的函数Person。
			console.log(a.constructor===Person);//true

			//getPrototypeOf查看实例的父类
			console.log(Object.getPrototypeOf(a)===Person.prototype);//true
			console.log(Object.getPrototypeOf(a));//Object { , 等 1 项… }

			//查看实例的constructor属性、构造函数的prototype的constructor属性
			console.log(a.constructor);//function Person()
			console.log(Person.prototype.constructor);//function Person()
			
			
			a和b都有一个constructor属性，该属性指向创建当前对象的构造函数，即Person。
			
			用instanceof操作符来检测对象的类型，
			因为instanceof用来专门比较一个对象是否是某个构造函数的实例。
		
		
		
		栗子优化：
			function Person(name,age,job){
				this.name=name;
				this.age=age;
				this.job=job;
			}
			function sayName(){
				alert(this.name+" "+this.age+" "+this.job);
			}
			
			把函数放在构造函数的外面作为全局函数，
			此时的a和b共享了在全局变量定义的同一个函数sayName函数。
			问题：在全局作用域中的定义的函数实际上只能被某个对象调用，这让该作用有点名不副实。
				如果对象需要定义很多个方法，name就要定义很多个全局函数，
				此时自定义的引用类型就没有封装性可言，因此我们需要另一种高大上的模式--原型模式。
	
		
		
		
		
		